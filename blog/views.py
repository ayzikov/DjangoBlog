# –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from .models import Post
from .forms import EmailPostForm, CommentPostForm, SearchForm
from taggit.models import Tag

# –∏–º–ø–æ—Ä—Ç—ã –¥–∂–∞–Ω–≥–æ
from django.shortcuts import render, get_object_or_404
from django.http import HttpRequest
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.views.generic import ListView
from django.core.mail import send_mail
from django.views.decorators.http import require_POST
from django.db.models import Count
from django.contrib.postgres.search import SearchVector, SearchQuery, SearchRank, TrigramSimilarity


def list_posts(request: HttpRequest, tag_slug=None):
    posts = Post.published.published()

    tag = None
    if tag_slug:
        # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ slug —Ç–µ–≥–∞, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —ç–∫–∑–µ–ø–ª—è—Ä –∏ –≤ posts
        # –ø–æ–ª—É—á–∞–µ–º QuerySet –ø–æ—Å—Ç–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Ç–µ–≥–∞—Ö –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ç–µ–≥
        tag = get_object_or_404(Tag, slug=tag_slug)
        posts = posts.filter(tag__in=[tag])


    # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
    paginator = Paginator(posts, 3)
    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ url –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç, —Ç–æ –ø–æ–ª—É—á–∞–µ–º 1
    page_number = request.GET.get('page', 1)
    # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Page, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ page_number
    page_obj = paginator.get_page(page_number)

    return render(request,
                  'blog/post/list_posts.html',
                  {'page_obj': page_obj, 'tag': tag})

# class PostListView(ListView):
#     context_object_name = 'posts'
#     paginate_by = 3
#     template_name = 'blog/post/list_posts.html'
#     queryset = Post.published.all()


def detail_post(request: HttpRequest, year, month, day, slug):
    ''' –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ª–∏–±–æ –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î –ª–∏–±–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ 404 '''
    post = get_object_or_404(Post,
                             status=Post.Status.PUBLISHED,
                             publish__year=year,
                             publish__month=month,
                             publish__day=day,
                             slug=slug)

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    comment_order = 'created'
    if 'desc' in request.GET:
        comment_order = '-created'
    elif 'asc' in request.GET:
        comment_order = 'created'
    comments = post.comments.filter(active=True).order_by(comment_order)

    # —Ñ–æ—Ä–º–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    form = CommentPostForm()

    # –≤—ã–±–æ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Ç–µ–≥–∞–º–∏

    # —Å–ø–∏—Å–æ–∫ id —Ç–µ–≥–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (post), flat=True —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å [1, 2, 3, ...],
    # –∞ –Ω–µ [(1,), (2,), (3,), ...]
    post_tags = post.tag.values_list('id', flat=True)

    # –ø–æ–ª—É—á–∞–µ–º QS (QuerySet) –ø–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç id —Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –∏ —É –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (post)
    # –Ω–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —É –ø–æ—Å—Ç–∞ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–µ–≥–∞ —Å –¥–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º (post), —Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ QS 3 —Ä–∞–∑–∞
    # –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ —ç—Ç–æ–≥–æ QS –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç (post)
    similar_posts = Post.published.filter(tag__in=post_tags).exclude(id=post.id)

    # —Å –ø–æ–º–æ—â—å—é annotate –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É QS –Ω–æ–≤–æ–µ –ø–æ–ª–µ same_tags,
    # –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–µ–≥–æ–≤ —Å –¥–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º (post) –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    similar_posts = similar_posts.annotate(same_tags=Count('tag')).order_by('-same_tags', '-publish')[:4]

    return render(request,
                  'blog/post/detail.html',
                  {'post': post, 'comments': comments, 'form': form, 'similar_posts': similar_posts})

def post_share(request: HttpRequest, post_id):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ñ–æ—Ä–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email '''
    post = get_object_or_404(Post,
                             id=post_id,
                             status=Post.Status.PUBLISHED)

    sent = False

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–≤–æ–¥–∏–º —Ñ–æ—Ä–º—É –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É
    if request.method == 'POST':
        form = EmailPostForm(request.POST)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–µ
        if form.is_valid():
            # —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            cd = form.cleaned_data

            # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π url –ø–æ—Å—Ç–∞
            post_url = request.build_absolute_uri(post.get_absolute_url())

            # —Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            email_title = f"–ù–æ–≤—ã–π –ø–æ—Å—Ç"

            # —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            email_body = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cd['name']} –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –í–∞–º–∏ –ø–æ—Å—Ç–æ–º\n'{post.title}'\n\n"
                          f"–ü—Ä–æ—á–∏—Ç–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ - {post_url}\n\n"
                          f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                          f"{cd['comment']}")

            send_mail(
                subject=email_title,
                message=email_body,
                from_email='ayzikov070@yandex.ru',
                recipient_list=[cd['to_email']]
            )

            sent = True



    else:
        form = EmailPostForm()

    return render(request,
                  'blog/post/share.html',
                  {'post': post, 'form': form, 'sent': sent})


@require_POST
def post_comment(request: HttpRequest, post_id):
    ''' –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ '''

    post = get_object_or_404(Post,
                             id=post_id,
                             status=Post.Status.PUBLISHED)

    comment = None

    # –ø–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    form = CommentPostForm(request.POST)

    if form.is_valid():
        # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ –≤ –ë–î
        comment = form.save(commit=False)

        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
        comment.post = post

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        comment.save()


    return render(request,
                  'blog/post/comment.html',
                  {'post': post, 'form': form, 'comment': comment}
                  )


def post_search(request: HttpRequest):
    form = SearchForm()
    query = None
    results = []

    if 'query' in request.GET:
        form = SearchForm(request.GET)
        if form.is_valid():
            query = form.cleaned_data['query']
            search_query = SearchQuery(query, config='russian')
            search_vector = SearchVector('title', weight='A') + SearchVector('body', weight='B')

            # –ø–æ—á–µ–º—É —Ç–æ –±–µ–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∞—è üòê
            test = Post.published.get(id=3)

            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ QS –≤ —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ–ª–µ–π (title –∏–ª–∏ body) –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ (query)
            # results = ((Post.published.
            #            annotate(search=search_vector, rank=SearchRank(search_vector, search_query)).
            #            filter(rank__gte=0.3)).
            #            order_by('-rank'))

            results = ((Post.published.
                       annotate(similarity=TrigramSimilarity('title', query)).
                       filter(similarity__gte=0.1)).
                       order_by('-similarity'))

    return render(request,
                  'blog/post/search.html',
                  {'form': form, 'query': query, 'results': results})





